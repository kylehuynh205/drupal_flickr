<?php

/**
 * @file
 * Contains flickr.module.
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 */
function flickr_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        // Main module help for the flickr module.
        case 'help.page.flickr':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Flickr Integration') . '</p>';
            return $output;

        default:
    }
}

/**
 * Implements hook_theme().
 */
function flickr_theme() {
    return [
        'flickr' => [
            'render element' => 'children',
        ],
    ];
}

/**
 * Run Download Data Cron
 */
function flickr_cron() {
    print_log("Running Crons");
    //start_flickr_sync_cron_task();
    \Drupal::lock()->release('cron');
}

/**
 * Run operation of sync with Flickr
 * 
 * @param type $form
 * @param type $form_state
 */
function start_flickr_sync_cron_task() {
    \Drupal::state()->set(Utils::CRON_VARIABLE_FLICKR_PHOTO, 0);
    // get next tiem 
    if (\Drupal::service('cron')->run()) {
        drupal_set_message(t('Cron ran successfully.'));
        //variable_set(CRON_VARIABLE_FLICKR_PHOTO, time() + FLICKR_CRON_INTERVAL);
        \Drupal::state()->set(Utils::CRON_VARIABLE_FLICKR_PHOTO, time() + Utils::FLICKR_CRON_INTERVAL);
    } else {
        drupal_set_message(t('Cron run failedsafdsadfasd.'), 'error');
    }
}

/**
 * hook_queue_info
 */
function flickr_queue_info() {
    $service = \Drupal::service('flickr.download');
    $page = 1;
    $result = $service->rest_get_flickr_photos($service, $page);
    do_download_all_photos_at_once($service, $result);
}

/**
 * DEBUG : log msg
 * 
 */
function print_log($thing) {
    error_log(print_r($thing, true), 0);
}

function logging($thing) {
    echo '<pre>';
    print_r($thing);
    echo '</pre>';
}

/**
 * Modify content type edit/add form 
 * 
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function flickr_form_alter(&$form, &$form_state, $form_id) {

    if ($form_id == "node_flickr_photo_edit_form") {
        $node = $form_state->getFormObject()->getEntity();
        //print_log(array_keys($form));

        $form['#attached']['library'] = array(
            'flickr/bootstrap',
            'flickr/font_awesome',
        );


        $form['photo_assets'] = array(
            '#type' => 'details',
            '#title' => 'Photo <i>' . $node->title->value . '</i>:',
            '#open' => true,
            '#weight' => 100
        );

        $form['photo_assets']['flickr-page'] = array(
            '#markup' => new \Drupal\Component\Render\FormattableMarkup(
                    '<a class="btn btn-danger" href="' . $node->field_photopage_url->value . '" target="_blank" download><i class="fab fa-flickr"></i> View in Flickr</a>', [])
        );
        $form['photo_assets']['download-other-size-page'] = array(
            '#markup' => new \Drupal\Component\Render\FormattableMarkup(
                    '&nbsp;&nbsp;<a class="btn btn-primary" href="' . $node->field_photo_org_url->value . '" target="_blank" download><i class="fas fa-download"></i> Download Other sizes</a>', [])
        );

        $form['photo_assets']['container'] = array(
            '#type' => 'container',
            '#attributes' => ['class' => ['row']]
        );

        $form['photo_assets']['container']['size-thumb'] = array(
            '#markup' => new \Drupal\Component\Render\FormattableMarkup(
                    '<p>'
                    . '<img src="' . $node->field_photo_thumb_url->value . '" />'
                    . '</p>'
                    . '<figcaption><strong>Thumbnail Size (640x640)</strong></figcaption>'
                    . '<p><a class="btn btn-info" href="' . $node->field_photo_thumb_url->value . '" target="_blank" download><i class="fas fa-download"></i> Download</a></p>', []),
            '#prefix' => '<div class="col-sm-3 text-center">',
            '#suffix' => '</div>'
        );
        $form['photo_assets']['container']['size-big'] = array(
            '#markup' => new \Drupal\Component\Render\FormattableMarkup(
                    '<p><img src="' . $node->field_photo_big_url->value . '" /></p>'
                    . '<figcaption><strong>Big Size (1024 on longest side)</strong></figcaption>'
                    . '<p><a class="btn btn-info" href="' . $node->field_photo_big_url->value . '" target="_blank" download><i class="fas fa-download"></i> Download</a></p>', []),
            '#prefix' => '<div class="col-sm-9 text-center">',
            '#suffix' => '</div>'
        );

        $form['advanced']['photo_dates'] = array(
            '#type' => 'details',
            '#title' => 'Dates',
            '#weight' => 101
        );
        $form['advanced']['photo_dates']['dates'] = array(
            '#markup' => new \Drupal\Component\Render\FormattableMarkup(
                    '<p><strong>Date Taken:</strong> ' . $node->field_date_taken->value . '</p>'
                    . '</p><strong>Date Uploaded:</strong> ' . $node->field_date_uploaded->value . '</p>'
                    . '<p><strong>Date Last Update:</strong> ' . $node->field_date_last_update->value . '</p>', [])
        );


        $form['advanced']['photo_exif'] = array(
            '#type' => 'details',
            '#title' => 'Photo Exif',
            '#weight' => 101
        );
        $form['advanced']['photo_exif']['container'] = array(
            '#type' => 'container'
        );
        $form['advanced']['photo_exif']['container']['exif'] = array(
            '#markup' => new \Drupal\Component\Render\FormattableMarkup($node->field_photo_exif->value, [])
        );
        //unset($form['field_tags']);
    } else if ($form_id == "node_flickr_user_edit_form") {

        $node = $form_state->getFormObject()->getEntity();
        //print_log(array_keys($form));

        $form['#attached']['library'] = array(
            'flickr/bootstrap',
            'flickr/font_awesome',
        );
    } else if ($form_id == "node_flickr_album_edit_form") {

        $node = $form_state->getFormObject()->getEntity();
        //print_log(array_keys($form));

        $form['#attached']['library'] = array(
            'flickr/bootstrap',
            'flickr/font_awesome',
        );
    }
    return $form;
}

function flickr_pathauto_alias_alter(\Drupal\Core\Entity\EntityInterface $node) {

    
}

/**
 * Implement hook_node_presave
 * @param \Drupal\Core\Entity\EntityInterface $node
 */
function flickr_entity_presave(\Drupal\Core\Entity\EntityInterface $node) {
    
    if ($node->getEntityType()->id() == 'node' && in_array($node->getType(), ['flickr_user', 'flickr_album', 'flickr_photo'])) {
        $node->setNewRevision(TRUE);
        $node->revision_log = (!empty($node->getRevisionLogMessage()) ? $node->getRevisionLogMessage() : time());
        $node->setRevisionCreationTime(REQUEST_TIME);
        $node->setRevisionUserId($user_id);
    }
}

/**
 * Implements hook_insert().
 */
function flickr_entity_insert(\Drupal\Core\Entity\EntityInterface $node) {
    // Set the URL alias
    if (get_class($node) == 'Drupal\node\Entity\Node') {
        \Drupal\flickr\Classes\Utils::createNodeAlias($node);
    }
}

function flickr_entity_update(\Drupal\Core\Entity\EntityInterface $node) {
    if (get_class($node) == 'Drupal\node\Entity\Node') {
        \Drupal\flickr\Classes\Utils::createNodeAlias($node);
    }
}

/**
 * Hook_install
 */
function flickr_install() {

    // create role for module 
    if (!\Drupal\flickr\Classes\Utils::isRoleExisted(Drupal\flickr\classes\Utils::getRole()['id'])) {
        \Drupal\flickr\Classes\Utils::createRole(Drupal\flickr\classes\Utils::getRole());
    }
}

/**
 * Hook uninstall
 */
function flickr_uninstall() {

    // delete exclusive role of the module
    \Drupal\flickr\Classes\Utils::deleteRole(Drupal\flickr\classes\Utils::getRole()['id']);
}
